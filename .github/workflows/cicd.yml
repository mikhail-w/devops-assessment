name: Basic CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  FRONTEND_IMAGE: pokedex-frontend
  BACKEND_IMAGE: pokedex-backend
  AWS_REGION: us-east-1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          npm run lint || true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python manage.py test

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/$FRONTEND_IMAGE:latest ./frontend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/$FRONTEND_IMAGE:latest

      - name: Build & Push Backend Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/$BACKEND_IMAGE:latest ./backend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/$BACKEND_IMAGE:latest

  provision:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: $AWS_REGION

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init & Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: provision
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy Application
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.SERVER_IP }} << 'EOF'
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/$FRONTEND_IMAGE:latest
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/$BACKEND_IMAGE:latest
            docker-compose -f ~/pokedex-app/docker-compose.yml up -d
          EOF
