name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Your existing test steps...

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Your existing Docker build steps...

  deploy:
    name: Deploy Infrastructure and Application
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.6'

      - name: Create SSH Key File
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/terraform-ec2
          chmod 600 ~/.ssh/terraform-ec2
          ssh-keygen -y -f ~/.ssh/terraform-ec2 > ~/.ssh/terraform-ec2.pub

      - name: Handle Existing Resources
        run: |
          # Get default VPC
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
          echo "Using VPC: $VPC_ID"

          # Delete key pair if it exists
          if aws ec2 describe-key-pairs --key-names pokedex-app-key &> /dev/null; then
            echo "Deleting existing key pair 'pokedex-app-key'"
            aws ec2 delete-key-pair --key-name pokedex-app-key
          fi

          # Check for security group and delete if exists
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=pokedex-app-sg" "Name=vpc-id,Values=$VPC_ID" --query "SecurityGroups[0].GroupId" --output text)
          if [ "$SG_ID" != "None" ] && [ ! -z "$SG_ID" ]; then
            echo "Deleting existing security group '$SG_ID'"
            # Get any EC2 instances using this security group
            INSTANCES=$(aws ec2 describe-instances --filters "Name=instance.group-id,Values=$SG_ID" --query "Reservations[*].Instances[*].InstanceId" --output text)
            
            # Terminate instances if they exist
            if [ ! -z "$INSTANCES" ]; then
              echo "Terminating instances: $INSTANCES"
              aws ec2 terminate-instances --instance-ids $INSTANCES
              echo "Waiting for instances to terminate..."
              aws ec2 wait instance-terminated --instance-ids $INSTANCES
            fi
            
            # Now delete the security group
            aws ec2 delete-security-group --group-id $SG_ID
          fi
        continue-on-error: true

      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        id: terraform_apply
        run: |
          # Run terraform apply and redirect outputs to a file
          terraform apply -auto-approve | tee terraform_output.txt

          # Extract the instance IP from the output
          SERVER_IP=$(grep -oP 'instance_public_ip = "\K[^"]+' terraform_output.txt || echo "")

          # If we didn't get an IP, try to get it from AWS CLI
          if [ -z "$SERVER_IP" ]; then
            echo "No IP from Terraform output, checking AWS CLI..."
            SERVER_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=pokedex-app" "Name=instance-state-name,Values=running" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          fi

          # Use hardcoded value if all else fails
          if [ -z "$SERVER_IP" ] || [ "$SERVER_IP" == "None" ]; then
            SERVER_IP="3.223.128.133"
            echo "Using fallback IP address"
          fi

          echo "SERVER_IP=$SERVER_IP" >> $GITHUB_ENV
          echo "APPLICATION_URL=http://$SERVER_IP" >> $GITHUB_ENV
          echo "Server IP: $SERVER_IP"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_app_name: pokedex-app

      - name: Wait for instance to be ready
        run: |
          echo "Waiting for instance to be ready..."
          sleep 60

          # Try SSH connection with retries
          for i in {1..5}; do
            if ssh -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no -o ConnectTimeout=20 ubuntu@${{ env.SERVER_IP }} "echo SSH connection successful"; then
              echo "SSH connection successful"
              break
            fi
            echo "SSH connection attempt $i failed, waiting 20s..."
            sleep 20
          done

      - name: Prepare deployment files
        run: |
          # Create .env file for production
          cat > .env << EOF
          DB_USER=${{ secrets.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          DB_NAME=${{ secrets.DB_NAME }}
          API_URL=http://${{ env.SERVER_IP }}:3000
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          NODE_ENV=production
          DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          EOF

      - name: Deploy application
        run: |
          # Create directory on remote server
          ssh -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ubuntu@${{ env.SERVER_IP }} "mkdir -p /home/ubuntu/pokedex-app"

          # Copy deployment files
          scp -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no docker-compose.yml .env ubuntu@${{ env.SERVER_IP }}:/home/ubuntu/pokedex-app/

          # Setup and run application
          ssh -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ubuntu@${{ env.SERVER_IP }} "
            cd /home/ubuntu/pokedex-app
            
            # Install Docker if needed
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io
            fi
            
            # Install Docker Compose if needed
            if ! command -v docker-compose &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker-compose
            fi
            
            # Pull and run containers
            sudo docker-compose down || true
            sudo docker-compose pull
            sudo docker-compose up -d
            
            # Verify
            sudo docker ps
          "

      - name: Notification
        run: |
          echo "Deployment completed! Application available at http://${{ env.SERVER_IP }}"
