name: Minimalist CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  FRONTEND_IMAGE: frontend
  BACKEND_IMAGE: backend
  DOCKER_REGISTRY: docker.io
  AWS_REGION: us-east-1

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Frontend Tests
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      # Backend Tests
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest

  build:
    name: Build Images
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags:
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags:
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest

  deploy:
    name: Deploy Application
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy EC2 instance with Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Terraform Init and Apply
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Get EC2 Public IP
        id: get-ip
        run: |
          IP=$(terraform output -raw instance_public_ip)
          echo "instance_ip=$IP" >> $GITHUB_OUTPUT

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.get-ip.outputs.instance_ip }} >> ~/.ssh/known_hosts

      - name: Deploy with Docker Compose
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.yml ubuntu@${{ steps.get-ip.outputs.instance_ip }}:~/
          scp -i ~/.ssh/id_rsa .env ubuntu@${{ steps.get-ip.outputs.instance_ip }}:~/
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.instance_ip }} '
            docker-compose pull
            docker-compose up -d
          '

  health-check:
    name: Health Check
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check frontend status
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ needs.deploy.outputs.instance_ip }}
          max-attempts: 3
          retry-delay: 5s
